/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.ijse.foodshop.view;

import com.sun.glass.events.KeyEvent;
import lk.ijse.foodshop.controller.CustomerController;
import lk.ijse.foodshop.controller.FoodController;
import lk.ijse.foodshop.controller.OrderController;
import lk.ijse.foodshop.controller.OrderDetailController;
import lk.ijse.foodshop.controller.QuerController;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lk.ijse.foodshop.dto.CustomerDTO;
import lk.ijse.foodshop.dto.FoodDTO;
import lk.ijse.foodshop.dto.OrderDetailDTO;
import lk.ijse.foodshop.dto.OrdersDTO;
import lk.ijse.foodshop.dto.QueryDTO;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author kushantha
 */
public class OrderForm extends javax.swing.JPanel {

    /**
     * Creates new form OrderForm
     */
    public OrderForm() throws ClassNotFoundException, SQLException {
        initComponents();
        loadOrderID();
        loadDate();
        AutoCompleteDecorator.decorate(comboFood);
        loadAllFoods();
        txtAVQty.setVisible(false);
        lblAVQty.setVisible(false);
        lblO2.setVisible(false);
        loadAllOrders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrders = new javax.swing.JTable();
        txtContact = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtCustID = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtUPrice = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblList = new javax.swing.JTable();
        comboFood = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        txtFoodID = new javax.swing.JTextField();
        txtCustName = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtBQty = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        btnremovefood = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtAVQty = new javax.swing.JTextField();
        lblAVQty = new javax.swing.JLabel();
        lblODate = new javax.swing.JLabel();
        btnPlaceOrder = new javax.swing.JButton();
        txtCustAddress = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        btnAdd1 = new javax.swing.JButton();
        lblOID = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnremove = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        lblO2 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Food id", "item Name", "Qty", "Date", "contact No", "total"
            }
        ));
        tblOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrdersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblOrders);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 830, 380));

        txtContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactActionPerformed(evt);
            }
        });
        txtContact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtContactKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtContactKeyReleased(evt);
            }
        });
        add(txtContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 210, 40));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(120, 36, 69));
        jLabel1.setText("MANAGE ORDERS");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Untitled-2.jpg"))); // NOI18N
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 970, -1));

        jLabel5.setText("ORDER DATE :");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 90, -1, -1));

        jLabel7.setText("CUSTOMER CONTACT :");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));

        jLabel6.setText("CUSTOMER ID :");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 180, -1, -1));

        jLabel10.setText("ORDER ID :");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, -1));
        add(txtCustID, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 200, 140, 40));

        jLabel11.setText("FOOD ID :");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 270, -1, -1));

        jLabel12.setText("UNIT PRICE :");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 270, -1, -1));
        add(txtUPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 290, 120, 40));

        tblList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ITEM ID", "QTY", "TOTAL"
            }
        ));
        jScrollPane2.setViewportView(tblList);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 410, 270, 320));

        comboFood.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select food" }));
        comboFood.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboFoodItemStateChanged(evt);
            }
        });
        add(comboFood, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 230, 40));

        jLabel13.setText("DESCRIPTION :");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));
        add(txtFoodID, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 290, 150, 40));
        add(txtCustName, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 200, 150, 40));

        jLabel16.setText("CUSTOMER NAME");
        add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, -1, -1));

        txtBQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBQtyKeyReleased(evt);
            }
        });
        add(txtBQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 290, 70, 40));

        jLabel17.setText("BOUGHT QTY :");
        add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 270, -1, -1));

        btnremovefood.setBackground(new java.awt.Color(141, 134, 13));
        btnremovefood.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnremovefood.setForeground(new java.awt.Color(255, 255, 255));
        btnremovefood.setText("REMOVE");
        btnremovefood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnremovefoodActionPerformed(evt);
            }
        });
        add(btnremovefood, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 740, 120, 40));

        lblTotal.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lblTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 140, 250, 30));

        jPanel2.setBackground(new java.awt.Color(41, 39, 40));
        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, -1));
        add(txtAVQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 290, 70, 40));

        lblAVQty.setText("AV QTY :");
        add(lblAVQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 270, -1, -1));

        lblODate.setForeground(new java.awt.Color(0, 0, 0));
        lblODate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblODate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(lblODate, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 110, 160, 40));

        btnPlaceOrder.setBackground(new java.awt.Color(141, 134, 13));
        btnPlaceOrder.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnPlaceOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnPlaceOrder.setText("PLACE ORDER");
        btnPlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceOrderActionPerformed(evt);
            }
        });
        add(btnPlaceOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 740, -1, 40));
        add(txtCustAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 200, 140, 40));

        jLabel14.setText("ADDRESS :");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 180, -1, -1));

        btnAdd1.setBackground(new java.awt.Color(141, 134, 13));
        btnAdd1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnAdd1.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd1.setText("ADD");
        btnAdd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd1ActionPerformed(evt);
            }
        });
        add(btnAdd1, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 290, 110, 40));

        lblOID.setForeground(new java.awt.Color(0, 0, 0));
        lblOID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOID.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(lblOID, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 160, 40));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 80, 230, 50));

        btnremove.setBackground(new java.awt.Color(141, 134, 13));
        btnremove.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnremove.setForeground(new java.awt.Color(255, 255, 255));
        btnremove.setText("REMOVE ORDERS");
        btnremove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnremoveActionPerformed(evt);
            }
        });
        add(btnremove, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 160, 40));

        btnClear.setBackground(new java.awt.Color(141, 134, 13));
        btnClear.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 360, 80, 40));

        btnUpdate.setBackground(new java.awt.Color(141, 134, 13));
        btnUpdate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 360, 90, 40));

        lblO2.setForeground(new java.awt.Color(0, 0, 0));
        add(lblO2, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 380, 100, 20));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/icons8_search_50px_3.png"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 80, 50, 50));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd1ActionPerformed
        try {
            if (txtBQty != null && txtFoodID != null && lblTotal != null && comboFood != null) {
                DefaultTableModel model = (DefaultTableModel) tblList.getModel();
                int qty = Integer.parseInt(txtBQty.getText());
                double uPrice = Double.parseDouble(txtUPrice.getText());
                double total = uPrice * qty;
                int rowIndex = isAllreadyExixts(txtFoodID.getText());
                if (rowIndex == -1) {
                    Object[] rowData = {txtFoodID.getText(), qty, total};
                    model.addRow(rowData);
                } else {
                    qty += (int) model.getValueAt(rowIndex, 1);
                    total += (double) model.getValueAt(rowIndex, 2);
                    tblList.setValueAt(qty, rowIndex, 1);
                    tblList.setValueAt(total, rowIndex, 2);
                }
                calculateTtotal();
                clearText2();
                comboFood.removeAllItems();
                comboFood.addItem("Select Food");
                loadAllFoods();
            }else{
                 JOptionPane.showMessageDialog(this, "please input qty");
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAdd1ActionPerformed

    private void comboFoodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboFoodItemStateChanged
        try {
            String description = (String) comboFood.getSelectedItem();

            FoodDTO food = new OrderController().getFoodDetails(description);
            if (food != null) {
                txtFoodID.setText(food.getfId());
                txtUPrice.setText(String.valueOf(food.getUnitPrice()));
                if (food.getQty().equals("")) {
                    txtAVQty.setVisible(false);
                    lblAVQty.setVisible(false);
                } else {
                    txtAVQty.setVisible(true);
                    txtAVQty.setText(food.getQty());
                    lblAVQty.setVisible(true);
                }
            } else {
                clearText2();
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboFoodItemStateChanged

    private void txtContactKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactKeyReleased

        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_BACK_SPACE) {
            try {
                clearText();
                loadLastId();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtContactKeyReleased

    private void txtContactKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactKeyPressed

    }//GEN-LAST:event_txtContactKeyPressed

    private void txtContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactActionPerformed

        try {
            String checkContact = new CustomerController().checkContact(txtContact.getText());
            if (checkContact != null) {
                CustomerDTO customer = new OrderController().getContactDetails(txtContact.getText());
                if (customer != null) {
                    txtCustAddress.setText(customer.getAddrss());
                    txtCustName.setText(customer.getName());
                    txtCustID.setText(customer.getCustId());
                }
            } else {
                JOptionPane.showMessageDialog(this, "This phone number is not allready exists");
                loadLastId();

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtContactActionPerformed

    private void btnremovefoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnremovefoodActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblList.getModel();
        int row = tblList.getSelectedRow();
        if (row == -1) {
            return;
        }
        model.removeRow(row);
        calculateTtotal();

    }//GEN-LAST:event_btnremovefoodActionPerformed

    private void btnPlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceOrderActionPerformed
        try {
            String checkContact = new CustomerController().checkContact(txtContact.getText());
            if (checkContact != null) {
                String oId = lblOID.getText();
                String oDate = lblODate.getText();
                String contact = txtContact.getText();

                DefaultTableModel model = (DefaultTableModel) tblList.getModel();
                ArrayList<OrderDetailDTO> list = new ArrayList<>();
                for (int i = 0; i < model.getRowCount(); i++) {
                    String itemId = (String) model.getValueAt(i, 0);
                    int qty = (int) model.getValueAt(i, 1);
                    double total = (double) model.getValueAt(i, 2);
                    OrderDetailDTO detail = new OrderDetailDTO(oId, itemId, qty, total);
                    list.add(detail);
                }
                if (txtContact != null) {
                    OrdersDTO orders = new OrdersDTO(oId, contact, oDate, list);
//            String avQty = txtAVQty.getText();
                    boolean placeOrder = new OrderController().placeOrder(orders);
                    if (placeOrder) {
                        JOptionPane.showMessageDialog(this, "Order Placed");
                        loadOrderID();
                        loadAllOrders();
                        clearAll();
                        model.setRowCount(0);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "try again");
                }

            } else {
                String oId = lblOID.getText();
                String oDate = lblODate.getText();
                String contact = txtContact.getText();
                String name = txtCustName.getText();
                String id = txtCustID.getText();
                String address = txtCustAddress.getText();

                DefaultTableModel model = (DefaultTableModel) tblList.getModel();
                ArrayList<OrderDetailDTO> list = new ArrayList<>();
                for (int i = 0; i < model.getRowCount(); i++) {
                    String itemId = (String) model.getValueAt(i, 0);
                    int qty = (int) model.getValueAt(i, 1);
                    double total = (double) model.getValueAt(i, 2);
                    OrderDetailDTO detail = new OrderDetailDTO(oId, itemId, qty, total);
                    list.add(detail);
                }
                OrdersDTO orders = new OrdersDTO(oId, contact, oDate, list);
//            String avQty = txtAVQty.getText();
                if (txtContact != null && txtCustName != null && txtCustAddress != null) {
                    boolean addCustomer = new CustomerController().isAddedCustomer(new CustomerDTO(id, contact, name, address));
                    if (addCustomer) {
                        boolean placeOrder = new OrderController().placeOrder(orders);
                        if (placeOrder) {
                            JOptionPane.showMessageDialog(this, "Order Placed");
                            loadOrderID();
                            loadAllOrders();
                            clearAll();
                            lblAVQty.setVisible(false);
                            txtAVQty.setVisible(false);
                            lblTotal.setText("");
                            model.setRowCount(0);
                        } else {
                            JOptionPane.showMessageDialog(this, "try again");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "try again");
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "try again");
                }

            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnPlaceOrderActionPerformed

    private void btnremoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnremoveActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) tblOrders.getModel();
            int i = tblOrders.getSelectedRow();
            String foodID = (String) model.getValueAt(i, 1);
            String oid = (String) model.getValueAt(i, 0);
            int qty = (int) model.getValueAt(i, 3);
            boolean isDeleted = new OrderDetailController().deleteOrderDetails(foodID, String.valueOf(qty));
            if (isDeleted) {
                boolean rejectOrders = new OrderController().rejectOrders(txtContact.getText(), lblODate.getText());
                if (rejectOrders) {
                    String isCheckOrder = new OrderController().checkOrders(oid);
                    if (isCheckOrder == null) {
                        boolean deleteOrders = new OrderController().deleteOrders(oid);
                        if (deleteOrders) {
                            JOptionPane.showMessageDialog(this, "order Deleted");
                            clearAll();
                            loadAllOrders();
                        } else {
                            JOptionPane.showMessageDialog(this, "error");
                            loadAllOrders();
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "order Deleted");
                    }
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnremoveActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        try {
            comboFood.removeAllItems();
            comboFood.addItem("select Food");
            clearAll();
            DefaultTableModel model = (DefaultTableModel) tblList.getModel();
            model.setRowCount(0);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) tblOrders.getModel();
            int i = tblOrders.getSelectedRow();
            int tblQty = (int) model.getValueAt(i, 3);

            int qty = Integer.parseInt(txtBQty.getText());
            double total = Double.parseDouble(lblTotal.getText());
            boolean updateFood = new OrderController().updateFoodQty(String.valueOf(qty), String.valueOf(tblQty), txtFoodID.getText());
            if (updateFood) {
                boolean isUpdate = new OrderController().updateOrders(qty, txtFoodID.getText(), total);
                if (isUpdate) {
                    JOptionPane.showMessageDialog(this, "order updated");
                    clearAll();
                    loadAllOrders();
                } else {
                    JOptionPane.showMessageDialog(this, "Can't update");
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrdersMouseClicked
        int i = tblOrders.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblOrders.getModel();
        lblO2.setVisible(true);
        lblO2.setText(model.getValueAt(i, 0).toString());
        txtFoodID.setText(model.getValueAt(i, 1).toString());
        txtContact.setText(model.getValueAt(i, 5).toString());
        comboFood.removeAllItems();
        comboFood.addItem(model.getValueAt(i, 2).toString());
        txtBQty.setText(model.getValueAt(i, 3).toString());
    }//GEN-LAST:event_tblOrdersMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        try {
            DefaultTableModel model = (DefaultTableModel) tblOrders.getModel();
            model.setRowCount(0);

            for (QueryDTO temp : new OrderController().searchOrders(txtSearch.getText())) {
                model.addRow(new Object[]{
                    temp.getOid(),
                    temp.getfId(),
                    temp.getDescription(),
                    temp.getQty(),
                    temp.getDate(),
                    temp.getCustContact(),
                    temp.getTotal()

                });
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtBQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBQtyKeyReleased

        if (txtBQty.getText().equals("")) {

        } else {
            int qty = Integer.parseInt(txtBQty.getText());
            double UnitPrice = Double.parseDouble(txtUPrice.getText());
            double total = qty * UnitPrice;
            lblTotal.setText(String.valueOf(total));
        }


    }//GEN-LAST:event_txtBQtyKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd1;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnPlaceOrder;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnremove;
    private javax.swing.JButton btnremovefood;
    private javax.swing.JComboBox<String> comboFood;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAVQty;
    private javax.swing.JLabel lblO2;
    private javax.swing.JLabel lblODate;
    private javax.swing.JLabel lblOID;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tblList;
    private javax.swing.JTable tblOrders;
    private javax.swing.JTextField txtAVQty;
    private javax.swing.JTextField txtBQty;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtCustAddress;
    private javax.swing.JTextField txtCustID;
    private javax.swing.JTextField txtCustName;
    private javax.swing.JTextField txtFoodID;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtUPrice;
    // End of variables declaration//GEN-END:variables

    private void loadOrderID() throws ClassNotFoundException, SQLException {
        String orderId = new OrderController().getLastId();
        if (orderId == null) {
            lblOID.setText("OI001");
        } else {
            String split[] = orderId.split("OI");
            int num = Integer.parseInt(split[1]);
            num++;

            if (num < 10) {
                lblOID.setText("OI00" + num);
            } else if (num < 100) {
                lblOID.setText("OI0" + num);
            } else if (num < 1000) {
                lblOID.setText("OI" + num);

            }
        }
    }

    private void loadDate() {
        Date date = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY-MM-dd");
        String date2 = dateFormat.format(date);
        lblODate.setText(date2);
    }

//    private void loadAllContactId() throws ClassNotFoundException, SQLException {
//        for (CustomerDTO customer : new CustomerController().loadAllCustomer()) {
//            comboContact.addItem(customer.getContact());
//        }
//    }
    private void loadAllFoods() throws ClassNotFoundException, SQLException {
        ArrayList<FoodDTO> allFood = new FoodController().loadAllFood();
        for (FoodDTO food : allFood) {
            comboFood.addItem(food.getDescription());
        }
    }

    private void clearText() {
        txtCustAddress.setText("");
        txtCustName.setText("");
        txtCustID.setText("");
    }

    private void clearText2() {
        txtAVQty.setText("");
        txtFoodID.setText("");
        txtUPrice.setText("");
        txtBQty.setText("");
    }

    private int isAllreadyExixts(String id) {
        DefaultTableModel model = (DefaultTableModel) tblList.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String temp = model.getValueAt(i, 0).toString();
            if (temp.equalsIgnoreCase(id)) {
                return i;
            }
        }
        return -1;
    }

    private void calculateTtotal() {
        DefaultTableModel model = (DefaultTableModel) tblList.getModel();
        double labelTotal = 0;
        for (int i = 0; i < model.getRowCount(); i++) {
            labelTotal += (double) model.getValueAt(i, 2);
        }
        lblTotal.setText("Total : " + String.valueOf(labelTotal) + "/=");
    }

    private void loadAllOrders() throws ClassNotFoundException, SQLException {
        DefaultTableModel model = (DefaultTableModel) tblOrders.getModel();
        model.setRowCount(0);
        for (QueryDTO order : new QuerController().getAllOrders()) {
            model.addRow(new Object[]{
                order.getOid(),
                order.getfId(),
                order.getDescription(),
                order.getQty(),
                order.getDate(),
                order.getCustContact(),
                order.getTotal()
            });
        }
    }

    private void clearAll() throws ClassNotFoundException, SQLException {
        txtContact.setText("");
        txtCustName.setText("");
        txtCustAddress.setText("");
        txtCustID.setText("");
        txtBQty.setText("");
        txtFoodID.setText("");
        txtUPrice.setText("");
        txtAVQty.setText("");
        lblO2.setVisible(false);
        comboFood.removeAllItems();
        comboFood.addItem("select Item");
        loadAllFoods();

    }

    private void loadLastId() throws ClassNotFoundException, SQLException {

        String id = new CustomerController().getLastId();
        if (id == null) {
            txtCustID.setText("C001");
        } else {
            String split[] = id.split("C");
            int num = Integer.parseInt(split[1]);
            num++;

            if (num < 10) {
                txtCustID.setText("C00" + num);
            } else if (num < 100) {
                txtCustID.setText("C0" + num);
            } else {
                txtCustID.setText("C" + num);
            }

        }
    }
}
